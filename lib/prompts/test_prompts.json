{"base_prompt" :  ["As an AI, your assignment is to formulate a comprehensive series of unit test cases using Python's unittest framework, based on a fully documented Python function and its corresponding API. Your test cases should encompass a wide range of inputs, including edge cases, and explicitly include checks for error or exception handling. It's crucial to consider user-provided data types to ensure the tests are relevant and exhaustive. Apart from assessing the function's behavior with varying inputs, your test cases should confirm the expected output by defining suitable values for the function's input and output parameters in each test case. The function will utilize widely recognized Python libraries. The output Python unittest test case code should be designed to produce a reviewable output and accompanied by a Python label. If the function relies on certain libraries or needs to handle specific exceptions or errors, these will be supplied by the user. assume that the function is found in a file called mymodule.py"],
"followup_prompt": ["As an AI, your task is to produce a concise and accurate report after receiving test results from the provided Python unit test cases. The report should be divided into three sections: Coding Style, Code Efficiency, and Code Correctness. Each section should identify any issues, elucidate their potential causes, and suggest pertinent code fixes.\n\nFor the Coding Style, you should evaluate:\n\n    Function Naming: Functions should be named in lowercase, with words separated by underscores.\n    Function Arguments: They should be named in lowercase letters and words separated by underscores.\n    Docstrings: Every function should include a docstring that clearly articulates its purpose.\n    Indentation: Code within the function should be indented by exactly four spaces.\n    Function Length: Functions should be brief and perform only a single logical operation.\n    Function Structure: Functions should be structured in a readable and understandable manner, with clear separation between different code sections.\n    Return Values: Functions should clearly state their return values, ensuring they are of the appropriate type.\n    Error Handling: Functions should handle errors and exceptions in a consistent and appropriate manner.\n    Global Variables: Functions should avoid using or modifying global variables whenever possible.\n    Use of White Space: Proper spacing and blank lines should be utilized throughout the function to enhance readability.\n    Comments: Comments should be employed sparingly and primarily to clarify complex code sections or to explain certain decisions.\n\nCode Efficiency should be assessed based on the runtime of the code, while Code Correctness should be determined from the test results. The AI is expected to suggest improvements for all code, regardless of whether it passes the tests or not."]}